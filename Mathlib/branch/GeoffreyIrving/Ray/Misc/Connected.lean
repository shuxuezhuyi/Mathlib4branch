/-
Copyright (c) 2023 Geoffrey Irving. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Geoffrey Irving
-/
import Mathlib.Data.Set.Intervals.ProjIcc
import Mathlib.MeasureTheory.Integral.CircleIntegral
import Mathlib.branch.GeoffreyIrving.Ray.Misc.Topology

/-!
## Basic result about connected sets

Our main results are

1. Downward intersections are compact, preconnected sets are preconnected
2. Limit points at the ends of rays are preconnected
3. `f ‚Åª¬π' s` is path connected if `f ‚Åª¬π' frontier s` is, for compact `s`
-/

open Filter (Tendsto atTop atBot)
open Function (curry uncurry)
open Metric (ball closedBall isOpen_ball ball_mem_nhds mem_ball_self nonempty_ball sphere)
open Set
open scoped NNReal Topology Real
noncomputable section

variable {X : Type} [TopologicalSpace X]
variable {I : Type} [TopologicalSpace I] [ConditionallyCompleteLinearOrder I]
variable [DenselyOrdered I] [OrderTopology I]

theorem closure_inter_subset_compl {s u v : Set X} (vo : IsOpen v) (d : Disjoint u v) :
    closure (s ‚à© u) ‚äÜ v·∂ú := by
  rw [‚Üê vo.isClosed_compl.closure_eq]; apply closure_mono
  exact _root_.trans (inter_subset_right _ _) (Disjoint.subset_compl_left d.symm)

theorem isClosed_closed_inter {s u v : Set X} (sc : IsClosed s) (vo : IsOpen v) (d : Disjoint u v)
    (suv : s ‚äÜ u ‚à™ v) : IsClosed (s ‚à© u) := by
  rw [isClosed_iff_closure_diff]; by_contra h; simp only [‚Üê Ne.def, ‚Üê nonempty_iff_ne_empty] at h
  rcases h with ‚ü®x, h‚ü©; simp only [mem_diff, mem_inter_iff, not_and] at h
  have sus : closure (s ‚à© u) ‚äÜ s := by
    nth_rw 2 [‚Üê sc.closure_eq]; apply closure_mono; apply inter_subset_left
  have xs := sus h.1
  have m := not_or.mpr ‚ü®h.2 xs, not_mem_of_mem_compl (closure_inter_subset_compl vo d h.1)‚ü©
  rw [‚Üê mem_union _ _ _] at m; exact not_mem_subset suv m xs

/-- In a `NormalSpace`, `s` is preconnected iff for any two disjoint open sets that cover it,
    `s` is contained in one of them.  This is an open version of
    `isPreconnected_iff_subset_of_disjoint_closed`. -/
theorem isPreconnected_iff_subset_of_fully_disjoint_open [NormalSpace X] {s : Set X}
    (sc : IsClosed s) :
    IsPreconnected s ‚Üî ‚àÄ u v, IsOpen u ‚Üí IsOpen v ‚Üí s ‚äÜ u ‚à™ v ‚Üí Disjoint u v ‚Üí s ‚äÜ u ‚à® s ‚äÜ v := by
  rw [isPreconnected_iff_subset_of_fully_disjoint_closed sc]; constructor
  ¬∑ intro h u v uo vo suv uv
    have suc : IsClosed (s ‚à© u) := isClosed_closed_inter sc vo uv suv
    have svc : IsClosed (s ‚à© v) := isClosed_closed_inter sc uo uv.symm ((union_comm u v).subst suv)
    have h0 : s ‚äÜ s ‚à© u ‚à™ s ‚à© v := by
      simp only [‚Üêinter_distrib_left]; exact subset_inter (subset_refl _) suv
    have h1 : Disjoint (s ‚à© u) (s ‚à© v) := Disjoint.inter_left' _ (Disjoint.inter_right' _ uv)
    cases' h (s ‚à© u) (s ‚à© v) suc svc h0 h1 with su sv
    ¬∑ left; exact (subset_inter_iff.mp su).2
    ¬∑ right; exact (subset_inter_iff.mp sv).2
  ¬∑ intro h u v uc vc suv uv
    rcases NormalSpace.normal u v uc vc uv with ‚ü®u', v', uo, vo, uu, vv, uv'‚ü©
    cases' h u' v' uo vo (_root_.trans suv (union_subset_union uu vv)) uv' with h h
    ¬∑ left; intro x m; cases' (mem_union _ _ _).mp (suv m) with mu mv
      exact mu; exfalso; exact disjoint_left.mp uv' (h m) (vv mv)
    ¬∑ right; intro x m; cases' (mem_union _ _ _).mp (suv m) with mu mv
      exfalso; exact disjoint_right.mp uv' (h m) (uu mu); exact mv

/-- Directed intersections of preconnected compact sets are preconnected -/
theorem IsPreconnected.directed_iInter {I : Type} {s : I ‚Üí Set X} [Nonempty I] [T4Space X]
    (d : Directed Superset s) (p : ‚àÄ a, IsPreconnected (s a)) (c : ‚àÄ a, IsCompact (s a)) :
    IsPreconnected (‚ãÇ a, s a) := by
  contrapose p
  have ci : IsClosed (‚ãÇ a, s a) := isClosed_iInter fun i ‚Ü¶ (c i).isClosed
  simp only [isPreconnected_iff_subset_of_fully_disjoint_open ci, not_forall] at p
  simp only [isPreconnected_iff_subset_of_fully_disjoint_open (c _).isClosed, not_forall]
  rcases p with ‚ü®u, v, uo, vo, suv, uv, no‚ü©
  have e : ‚àÉ a, s a ‚äÜ u ‚à™ v := by
    by_contra h; simp only [not_exists, Set.not_subset] at h
    set t := fun a ‚Ü¶ s a \ (u ‚à™ v)
    suffices n : (‚ãÇ a, t a).Nonempty
    ¬∑ rcases n with ‚ü®x, n‚ü©; simp only [mem_iInter, mem_diff, forall_and, forall_const] at n
      rw [‚Üê mem_iInter] at n; simp only [suv n.1, not_true, imp_false] at n; exact n.2
    apply IsCompact.nonempty_iInter_of_directed_nonempty_compact_closed
    intro a b; rcases d a b with ‚ü®c, ac, bc‚ü©
    use c, diff_subset_diff_left ac, diff_subset_diff_left bc
    intro a; rcases h a with ‚ü®x, xa, xuv‚ü©; exact ‚ü®x, mem_diff_of_mem xa xuv‚ü©
    intro a; exact (c a).diff (uo.union vo)
    intro a; exact ((c a).diff (uo.union vo)).isClosed
  rcases e with ‚ü®a, auv‚ü©
  use a, u, v, uo, vo, auv, uv
  contrapose no; simp only [not_not] at no ‚ä¢
  cases' no with su sv
  left; exact _root_.trans (iInter_subset _ _) su
  right; exact _root_.trans (iInter_subset _ _) sv

/-- The limit points of a ray `atTop` are preconnected, where a ray is a map from a linearly
    ordered, conditionally complete space. -/
theorem IsPreconnected.limits_atTop [CompactSpace X] [T4Space X] {P : Type} [SemilatticeSup P]
    [TopologicalSpace P] [Nonempty P] (p : ‚àÄ a : P, IsPreconnected (Ici a))
    {r : P ‚Üí X} (rc : Continuous r) : IsPreconnected {x | MapClusterPt x atTop r} := by
  set s := fun a ‚Ü¶ closure (r '' Ici a)
  have m : Antitone s := fun a b ab ‚Ü¶ closure_mono (monotone_image (Ici_subset_Ici.mpr ab))
  have d : Directed Superset s := fun a b ‚Ü¶ ‚ü®a ‚äî b, m le_sup_left, m le_sup_right‚ü©
  have p : ‚àÄ a, IsPreconnected (s a) := fun a ‚Ü¶ ((p _).image _ rc.continuousOn).closure
  have c : ‚àÄ a, IsCompact (s a) := fun a ‚Ü¶ isClosed_closure.isCompact
  have e : {x | MapClusterPt x atTop r} = ‚ãÇ a, s a := by
    apply Set.ext; intro x
    simp only [mem_setOf, mem_iInter, mapClusterPt_iff, mem_closure_iff_nhds, Set.Nonempty,
      @forall_comm P]
    apply forall_congr'; intro t
    simp only [@forall_comm P, mem_inter_iff, mem_image, mem_Ici, @and_comm (_ ‚àà t),
      exists_exists_and_eq_and, Filter.frequently_atTop, exists_prop]
  rw [e]; exact IsPreconnected.directed_iInter d p c

/-- The limit points of a ray `atBot` are preconnected (the other direction of the ray in
    `IsPreconnected.limits_atTop`) -/
theorem IsPreconnected.limits_atBot [CompactSpace X] [T4Space X] {P : Type} [SemilatticeInf P]
    [TopologicalSpace P] [Nonempty P] (p : ‚àÄ a : P, IsPreconnected (Iic a))
    {r : P ‚Üí X} (rc : Continuous r) : IsPreconnected {x | MapClusterPt x atBot r} := by
  set r' : P·µí·µà ‚Üí X := r
  have rc' : Continuous r' := rc
  have p' : ‚àÄ a : P·µí·µà, IsPreconnected (Ici a) := fun a ‚Ü¶ p a
  exact IsPreconnected.limits_atTop p' rc'

/-- The limits points near `a` of an open curve from `Ioc a b` are preconnected -/
-- Ideally I'd use `IsPreconnected.limits_atTop` to prove this, but when I tried that
-- I hit horrible instance resolution mismatches.
theorem IsPreconnected.limits_Ioc [CompactSpace X] [T4Space X] {r : ‚Ñù ‚Üí X} {a b : ‚Ñù}
    (rc : ContinuousOn r (Ioc a b)) : IsPreconnected {x | MapClusterPt x (ùìù[Ioc a b] a) r} := by
  by_cases ab : ¬¨a < b
  ¬∑ simp only [Ioc_eq_empty ab, nhdsWithin_empty, MapClusterPt, Filter.map_bot, ClusterPt.bot,
      setOf_false, isPreconnected_empty]
  simp only [not_not] at ab
  set s := fun t : Ioc a b ‚Ü¶ closure (r '' Ioc a t)
  have n : Nonempty (Ioc a b) := ‚ü®b, right_mem_Ioc.mpr ab‚ü©
  have m : Monotone s := by
    intro a b ab; refine' closure_mono (monotone_image _)
    exact Ioc_subset_Ioc (le_refl _) (Subtype.coe_le_coe.mpr ab)
  have d : Directed Superset s := fun a b ‚Ü¶ ‚ü®min a b, m (min_le_left _ _), m (min_le_right _ _)‚ü©
  have p : ‚àÄ t, IsPreconnected (s t) := by
    intro ‚ü®t, m‚ü©; refine' (isPreconnected_Ioc.image _ (rc.mono _)).closure
    simp only [mem_Ioc] at m
    simp only [Subtype.coe_mk, Ioc_subset_Ioc_iff m.1, m.2, le_refl, true_and_iff]
  have c : ‚àÄ t, IsCompact (s t) := fun t ‚Ü¶ isClosed_closure.isCompact
  have e : {x | MapClusterPt x (ùìù[Ioc a b] a) r} = ‚ãÇ t, s t := by
    apply Set.ext; intro x
    simp only [mem_setOf, mem_iInter, mapClusterPt_iff, mem_closure_iff_nhds, Set.Nonempty,
      @forall_comm _ (Set X)]
    apply forall_congr'; intro u
    simp only [@forall_comm _ (u ‚àà ùìù x)]; apply forall_congr'; intro _
    simp only [mem_inter_iff, Filter.frequently_iff, nhdsWithin_Ioc_eq_nhdsWithin_Ioi ab]
    constructor
    ¬∑ intro h ‚ü®t, m‚ü©
      have tm : Ioc a t ‚àà ùìù[Ioi a] a := by
        apply Ioc_mem_nhdsWithin_Ioi
        simp only [mem_Ioc] at m; simp only [mem_Ico]; use le_refl _, m.1
      rcases h tm with ‚ü®v, vm, vu‚ü©; exact ‚ü®r v, vu, mem_image_of_mem _ vm‚ü©
    ¬∑ intro h v vm
      rcases mem_nhdsWithin_Ioi_iff_exists_Ioc_subset.mp vm with ‚ü®w, wa, wv‚ü©
      simp only [mem_Ioi] at wa
      have m : min w b ‚àà Ioc a b := by simp only [mem_Ioc]; use lt_min wa ab, min_le_right _ _
      rcases h ‚ü®_, m‚ü© with ‚ü®x, xu, rx‚ü©
      simp only [Subtype.coe_mk, mem_image, mem_Ioc, le_min_iff] at rx
      rcases rx with ‚ü®c, ‚ü®ac, cw, _‚ü©, cx‚ü©
      use c, wv (mem_Ioc.mpr ‚ü®ac, cw‚ü©); rwa [cx]
  rw [e]; exact IsPreconnected.directed_iInter d p c

/-- Nonempty, relatively clopen subsets of preconnected sets are empty or the full set -/
theorem IsPreconnected.relative_clopen {s t : Set X} (sp : IsPreconnected s) (ne : (s ‚à© t).Nonempty)
    (op : s ‚à© t ‚äÜ interior t) (cl : s ‚à© closure t ‚äÜ t) : s ‚äÜ interior t := by
  set u : Set s := (fun x : s ‚Ü¶ (x : X)) ‚Åª¬π' t
  have uo : IsOpen u := by
    rw [‚Üê subset_interior_iff_isOpen]; intro ‚ü®x, m‚ü© h
    simp only [mem_preimage, Subtype.coe_mk] at h
    have n := op ‚ü®m, h‚ü©
    simp only [mem_interior_iff_mem_nhds, preimage_coe_mem_nhds_subtype, Subtype.coe_mk] at n ‚ä¢
    exact nhdsWithin_le_nhds n
  have uc : IsClosed u := by
    rw [‚Üê closure_eq_iff_isClosed]; refine' subset_antisymm _ subset_closure
    refine' _root_.trans (continuous_subtype_val.closure_preimage_subset _) _
    intro ‚ü®x, m‚ü© h; exact cl ‚ü®m, h‚ü©
  have p : IsPreconnected (univ : Set s) := (Subtype.preconnectedSpace sp).isPreconnected_univ
  cases' disjoint_or_subset_of_clopen p ‚ü®uo, uc‚ü© with h h
  ¬∑ simp only [univ_disjoint, preimage_eq_empty_iff, Subtype.range_coe] at h
    exfalso; exact ne.not_disjoint h.symm
  ¬∑ rw [‚Üê Subtype.coe_preimage_self, preimage_subset_preimage_iff] at h
    exact _root_.trans (subset_inter (subset_refl _) h) op
    simp only [Subtype.range_coe, subset_refl]

/-- `ContinuousOn` images of preconnected sets are preconnected (this is a version of
    `IsPathConnected.image` assuming only `ContinuousOn`) -/
theorem IsPathConnected.image_of_continuousOn {X Y : Type} [TopologicalSpace X] [TopologicalSpace Y]
    {s : Set X} (sc : IsPathConnected s) {f : X ‚Üí Y} (fc : ContinuousOn f s) :
    IsPathConnected (f '' s) := by
  set u : Set s := univ
  have uc : IsPathConnected u := by
    convert sc.preimage_coe (subset_refl _); apply Set.ext; intro x
    simp only [mem_univ, true_iff_iff, mem_preimage, Subtype.mem]
  have e : f '' s = s.restrict f '' u := by
    apply Set.ext; intro y; constructor
    intro ‚ü®x, m, e‚ü©; use‚ü®x, m‚ü©, mem_univ _, e
    intro ‚ü®‚ü®x, m‚ü©, _, e‚ü©; use x, m, e
  rw [e]; exact uc.image (continuousOn_iff_continuous_restrict.mp fc)

-- /-- Circles are path connected -/
-- theorem isPathConnected_sphere {z : ‚ÑÇ} {r : ‚Ñù} (r0 : 0 ‚â§ r) : IsPathConnected (sphere z r) := by
--   rw [‚Üê abs_of_nonneg r0, ‚Üê image_circleMap_Ioc z r]
--   refine' IsPathConnected.image _ (continuous_circleMap _ _)
--   exact (convex_Ioc 0 (2 * œÄ)).isPathConnected (nonempty_Ioc.mpr Real.two_pi_pos)

/-- Path connectedness of `f ‚Åª¬π' frontier s` implies path connectedness of `f ‚Åª¬π' s`,
    for compact `s`.

    Proof: Walk out of s until we hit the frontier, then move within the frontier.
    Unfortunately this seems very tedious to write out, so I'm clearly missing some tricks. -/
theorem IsPathConnected.of_frontier {X Y : Type} [TopologicalSpace X] [TopologicalSpace Y]
    [PathConnectedSpace X] {f : X ‚Üí Y} {s : Set Y}
    (pc : IsPathConnected (f ‚Åª¬π' frontier s)) (fc : Continuous f) (sc : IsClosed s) :
    IsPathConnected (f ‚Åª¬π' s) := by
  have pc' := pc; rcases pc' with ‚ü®b, fb, j‚ü©; use b
  simp only [mem_preimage, mem_singleton_iff] at fb j ‚ä¢
  have bs : f b ‚àà s := sc.frontier_subset fb
  use bs; intro x fx
  rcases PathConnectedSpace.Joined x b with ‚ü®p‚ü©
  generalize hu : Icc (0 : ‚Ñù) 1 ‚à© ‚ãÇ (a) (_ : f (p.extend a) ‚àâ s), Iic a = u
  have bdd : BddAbove u := by rw [‚Üê hu, bddAbove_def]; use 1; intro t ‚ü®m, _‚ü©; exact m.2
  have un : u.Nonempty := by
    rw [‚Üê hu]; use 0, left_mem_Icc.mpr zero_le_one; simp only [mem_iInter‚ÇÇ, mem_Iic]; intro a m
    contrapose m; simp only [not_not, p.extend_of_le_zero (not_le.mp m).le, fx]
  have uc : IsClosed u := by
    rw [‚Üê hu]; apply isClosed_Icc.inter; apply isClosed_iInter; intro a; apply isClosed_iInter
    intro _; exact isClosed_Iic
  set t := sSup u
  have tu : t ‚àà u := by rw [‚Üê uc.closure_eq]; exact csSup_mem_closure un bdd
  have m : t ‚àà Icc (0 : ‚Ñù) 1 := by rw [‚Üê hu] at tu; exact tu.1
  have lo : ‚àÄ a, a ‚â§ t ‚Üí f (p.extend a) ‚àà s := by
    intro a h; contrapose h; simp only [not_le]
    replace h : ‚àÄ·∂† b in ùìù a, f (p.extend b) ‚àâ s :=
      (fc.comp p.continuous_extend).continuousAt.eventually_mem sc.isOpen_compl h
    simp only [‚Üê hu, mem_inter_iff, mem_iInter‚ÇÇ, mem_Iic] at tu ‚ä¢
    rcases (a.frequently_smaller.and_eventually h).exists with ‚ü®c, ca, cs‚ü©
    exact lt_of_le_of_lt (tu.2 c cs) ca
  by_cases t1 : t = 1
  ¬∑ use p.symm; intro a; simp only [p.symm_apply, Function.comp, mem_preimage]
    rw [‚Üê Path.extend_extends']; apply lo; rw [t1]; unit_interval
  replace t1 : t < 1 := Ne.lt_of_le t1 m.2
  have ft : f (p ‚ü®t, m‚ü©) ‚àà frontier s := by
    simp only [frontier, mem_diff, sc.closure_eq]; constructor
    ¬∑ convert lo t (le_refl _)
      simp only [ge_iff_le, zero_le_one, not_true, gt_iff_lt, mem_Icc, Path.extend_extends _ m]
    ¬∑ have e : p ‚ü®t, m‚ü© = p.extend t := by
        simp only [Path.extend, IccExtend_apply, min_eq_right m.2, max_eq_right m.1]
      rw [e]; clear e; simp only [‚Üê @mem_preimage _ _ (f.comp p.extend)]
      by_contra h
      have o : IsOpen (f ‚àò p.extend ‚Åª¬π' interior s) :=
        isOpen_interior.preimage (fc.comp p.continuous_extend)
      rcases(nhds_basis_Ioo t).mem_iff.mp (o.mem_nhds h) with ‚ü®‚ü®x, y‚ü©, ‚ü®xt, ty‚ü©, h‚ü©
      simp only [subset_def, mem_Ioo, and_imp, mem_preimage, Function.comp] at xt ty h
      rcases exists_between (lt_min ty t1) with ‚ü®z, tz, zy1‚ü©; rcases lt_min_iff.mp zy1 with ‚ü®zy, z1‚ü©
      suffices h : z ‚àà u; linarith [le_csSup bdd h]
      rw [‚Üê hu]; refine' ‚ü®‚ü®_root_.trans m.1 tz.le, z1.le‚ü©, _‚ü©
      simp only [mem_iInter‚ÇÇ, mem_Iic]; intro w ws
      contrapose ws; simp only [not_not, not_le] at ws ‚ä¢
      by_cases xw : x < w; refine' interior_subset (h _ xw (_root_.trans ws zy))
      simp only [not_lt] at xw; exact lo _ (_root_.trans xw xt.le)
  -- Walk from b to p t
  refine ((pc.joinedIn _ ft b fb).mono (preimage_mono sc.frontier_subset)).symm.trans
    (JoinedIn.symm ?_)
  -- Walk from x to p t
  generalize hq : (fun a : unitInterval ‚Ü¶ p.extend (min a t)) = q
  have qc : Continuous q := by
    rw [‚Üê hq]; exact p.continuous_extend.comp (continuous_subtype_val.min continuous_const)
  refine ‚ü®‚ü®‚ü®q,qc‚ü©,?_,?_‚ü©,?_‚ü©
  ¬∑ simp only [‚Üê hq]; simp only [Icc.coe_zero, min_eq_left m.1, p.extend_zero]
  ¬∑ simp only [‚Üê hq]
    simp only [Icc.coe_one, min_eq_right m.2, Path.extend, IccExtend_apply, max_eq_right m.1]
  ¬∑ intro ‚ü®a, n‚ü©; simp only [mem_preimage, Path.coe_mk_mk, ‚Üê hq, Subtype.coe_mk]
    exact lo _ (min_le_right _ _)
